@model Garden_Centre_MVC.ViewModels.Transactions.EditViewModel

<!--For for the edit view-->
<form>
    <div class="form-group">
        <h2>Customer</h2>
        @Html.DropDownListFor(m => m._transactionOverview.Customer, new SelectList(Model.CustomerList, "CustomerId", "FullName"), "Select Customer", new { @id = "Edit_CustomerSelection" + Model._transactionOverview.TransactionNumber, @class = "testa form-control" })
        @Html.ValidationMessageFor(m => m._transactionOverview.Customer)
    </div>

    <div class="form-group">
        <h2>Item</h2>
        @Html.DropDownListFor(m => m._items, new SelectList(Model.ItemList, "ItemId", "Description"), "Select Item", new { @id = "Edit_ItemSelection" + Model._transactionOverview.TransactionNumber, @class = "testb form-control" })
        @Html.ValidationMessageFor(m => m._items)
    </div>
</form>
<!--Double check to make sure there is actually some items to display.-->
@if (Model._items.Count > 0 || Model._newItems.Count > 0)
{
    <!--Create the table the edit view-->
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <td>Item</td>
                <td>Price</td>
                <td>Actions</td>
            </tr>
        </thead>
        <tbody>
            @{
                float fVal = 0.0f;
                int i = 0;
            }

            @foreach (Garden_Centre_MVC.Models.Item item in Model._items)
            {
                <tr>
                    <td>@item.Description</td>
                    <td>£@item.ItemPrice</td>
                    <td>
                        <button btnId="@i" style="background: none; border: none; color:#2c3e50;" class="editRemBtn btn btn-primary" title="Remove this item from the transaction !"><i class="fa fa-remove"></i></button>
                    </td>
                </tr>

                fVal += item.ItemPrice;
                i++;
            }

            @foreach (Garden_Centre_MVC.Models.Item item in Model._newItems)
            {
                    <tr>
                        <td>@item.Description</td>
                        <td>£@item.ItemPrice</td>
                        <td>
                            <button btnId="@i" style="background:none; border:none; color:#2c3e50;" class="editRemBtn btn btn-primary"><i class="fa fa-remove"></i></button>
                        </td>
                    </tr>

                fVal += item.ItemPrice;
                i++;
            }
            <tr>
                <td>Transaction Value:</td>
                <td>£@fVal</td>
            </tr>
        </tbody>
    </table>
}

<!--Only display the save button if something has changed, there is a customer selected and there are items in the transaction.-->
@if (Model._transactionOverview.Customer != null && (Model._items.Count + Model._newItems.Count) > 0 && Model.HasChanged == true)
{
    <button class="editSaveBtn btn btn-primary" title="Save the changes to this transaction !">Save</button>
}
<button class="editCancelBtn btn btn-primary" title="Discard the changes and hide the edit menu for this transaction !">Cancel</button>

<script type="text/javascript">
    $(document).ready(function () {
        //Get the transaction number from the view model
        var transactionNumber = @Model._transactionOverview.TransactionNumber;

        //Find the selected customers index in the drop down displayed in this view
        var ind = -1;
        $("#Edit_CustomerSelection" + transactionNumber + " option").each(function (index, element) {
            if (element.value === '@Model._transactionOverview.CustomerId') {
                ind = index;
                return;
            }
        });

        //Set the slected customer in the dropdown to the index previously found.
        $("#Edit_CustomerSelection" + transactionNumber).prop("selectedIndex", ind);

        //Add a click handler for the remove item from transaction button
        $(".editRemBtn").on("click", function (e) {
            e.preventDefault();
            //Ajax all to controller method
            $.ajax({
                type: "POST",
                data: ({ index: $(this).attr("btnId"), prevVM: '@Html.Raw(Json.Encode(Model))' }),
                url: '@Url.Action("EditRemItem", "Transactions")',
                success: function (result) {
                    //Update the view
                    $("#Historic_DropDownView" + transactionNumber).html(result);
                },
                error: function (x, e, r) {
                    alert(e + " " + r);
                    alert(x.responseText);
                }
            });
         });

        //add a listener for when the selection changes for the customer
        $("#Edit_CustomerSelection" + transactionNumber).on("change", function (e) {
            e.preventDefault();

            //If the user selects the option "Select Customer" then display some feed back that theyre wrong
            if (!$("#Edit_CustomerSelection" + transactionNumber).val() || $("#Edit_CustomerSelection" + transactionNumber).val() === null || $("#Edit_CustomerSelection" + transactionNumber).val() === undefined) {
                alert("Please select a valid customer");
                $("#Edit_CustomerSelection" + transactionNumber).prop("selectedIndex", ind);
                return;
            }

            //Ajax call to controller method
            $.ajax({
                type: "POST",
                data: ({ customerId: $("#Edit_CustomerSelection" + transactionNumber).val(), prevVM: '@Html.Raw(Json.Encode(Model))' }),
                url: '@Url.Action("EditSelectCustomer", "Transactions")',
                success: function (result) {
                    //Display the updated vuew
                    $("#Historic_DropDownView" + transactionNumber).html(result);
                },
                error: function (x, e, r) {
                    alert(e + " " + r);
                    alert(x.responseText);
                }
            });
        });

        //Add event listener for when an item is selected
        $("#Edit_ItemSelection" + transactionNumber).on("change", function (e) {
            e.preventDefault();
            $.ajax({
                type: "POST",
                data: ({ itemId: $("#Edit_ItemSelection" + transactionNumber).val(), prevVM: '@Html.Raw(Json.Encode(Model))' }),
                url: '@Url.Action("EditAddItem", "Transactions")',
                success: function (result) {
                    //Update the view
                    $("#Historic_DropDownView" + transactionNumber).html(result);
                    //Reset the item selected to default "Item Selected" option
                    $("#Edit_ItemSelection" + "@Model._transactionOverview.TransactionNumber").prop("selectedIndex", '0').change(function (e) { this.val(e.val()); e.preventDefault(); });
                },
                error: function (x, e, r) {
                    alert(e + " " + r);
                    alert(x.responseText);
                }
            });
        });

        //Add listener to the cancel button
        $(".editCancelBtn").on("click", function (e) {
            //if the model hasnt changed close it, if it has confirm the user wishes to close it
            @if (!Model.HasChanged)
            {
                @:$("#Historic_DropDownView" + @Model._transactionOverview.TransactionNumber).delay(100).slideUp("slow", "swing", function (e) {
                    @:$("#Historic_DropDownViewTR" + @Model._transactionOverview.TransactionNumber).attr("style", "display:none;");
                    @:prevOpenedTN = '0';
                @:});

                @:return;
            }

            bootbox.confirm("Are you sure you would like discard changes to this transaction?", function (result) {
                if (result) {
                    $("#Historic_DropDownView" + @Model._transactionOverview.TransactionNumber).delay(100).slideUp("slow", "swing", function (e) {
                        $("#Historic_DropDownViewTR" + @Model._transactionOverview.TransactionNumber).attr("style", "display:none;");
                        prevOpenedTN = '0';
                    });
                }
            });
        });

        //Add listener to the sacve button
        $(".editSaveBtn").on("click", function (e) {
            //Ajax call to controller method
            $.ajax({
                type: "POST",
                data: ({ prevVM: '@Html.Raw(Json.Encode(Model))' }),
                url: '@Url.Action("SerializeEdit", "Transactions")',
                success: function (result) {
                    //slide the edit up
                    $("#Historic_DropDownView" + @Model._transactionOverview.TransactionNumber).delay(100).slideUp("slow", "swing", function (e) {
                        //hide the edit
                        $("#Historic_DropDownViewTR" + @Model._transactionOverview.TransactionNumber).attr("style", "display:none;");
                        //update the view
                        $("#View").html(result);
                        //Display some feedback
                        $("#Index_Feedback").slideUp("slow", "swing", function (e) {
                            //hide the feedback after three seconds
                            $("#Index_Feedback").delay(100).slideDown("slow").html("<h1>Successfully Edited The Transaction</h1>").delay(3000).slideUp("slow");
                        });
                        prevOpenedTN = '0';
                    });
                },
                error: function (x, e, r) {
                    alert(e + " " + r);
                    alert(x.responseText);
                }
            });

        });
    });
</script>